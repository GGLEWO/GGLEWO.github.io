{"meta":{"title":"GuanYM","subtitle":"热爱生活，向往远方","description":"前端开发一枚，不想秃头的麻鸡。","author":"GuanYm","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2020-06-13T04:12:34.000Z","updated":"2020-07-08T15:25:15.694Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-07-08T15:23:22.000Z","updated":"2020-07-08T15:25:04.026Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-06-13T04:12:10.000Z","updated":"2020-06-13T08:11:07.427Z","comments":true,"path":"tags/index-1.html","permalink":"http://yoursite.com/tags/index-1.html","excerpt":"","text":""},{"title":"tags","date":"2020-06-10T15:08:47.000Z","updated":"2020-06-10T15:10:12.563Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"webpack学习","slug":"webpack学习","date":"2020-06-16T13:19:49.814Z","updated":"2020-06-18T15:05:00.986Z","comments":true,"path":"2020/06/16/webpack学习/","link":"","permalink":"http://yoursite.com/2020/06/16/webpack%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"##1、 简易模板 ` const { resolve } = require(‘path’); // node 的一个语法，引入路径模块中的 resolve const HtmlWebPackPlugin = require(‘html-webpack-plugin’) // 引入下载好的插件 const MiniCssExtractPlugin = require(‘mini-css-extract-plugin’) // 需要下载好插件，是用来把js中的样式提取到单独的文件 module.exports = { // 暴露出去 entry: &apos;.src.index.js&apos; // 入口文件，告诉 webpack 从哪里开始打包 output: { filename: &apos;build.js&apos;, // 输出文件，打包生成文件的文件名字 path: resolve(__dirname, &apos;build&apos;) // 生成文件的路径，__dirname表示当前目录，&apos;build&apos;表示这个文件下 }, module: { // 相当于写 loader 的地方，因为 webpack 只能识别 js 和 json ，所以需要loader把其他语言转换为认识的语言（相当于翻译官） relues: [ { test: /\\.less$/, // 正则所有 less后缀的文件 use: [ // 匹配的文件要使用哪些 loader &apos;style-loader&apos;, // 把 js 中的 样式创建 style 标签 &apos;css-loader&apos;, // 把 css 整合到 js 中 &apos;less-loader&apos; // 把 less 转换为 css ] }, { // 处理图片资源,两个包：url-loader 、 file-loader, // 问题: 这样 处理不了 html 文件中的img图片 test: /\\.(jpg|png|gif)$/, loader: &apos;url-loader&apos;, options: { // 图片大小少于 8kb， 就会转成 base64 // base64 优点： 减少请求数量（减轻服务器压力） // 缺点：图片体积会更大（请求速度慢） limit: 8 * 1024 // 假如出现问题： [Object Module] esModule: false } }, { test: /\\.html$/, // html-loader 专门处理 html 文件中 img 图片（负责引入这个图片，从而能被 url-loader进行处理） loader: &apos;html-loader&apos; } ] }, plugins: [ new HTMLWebpacPlugin({ // 这个插件会自动引入 打包后的文件，并生成空的html文件 template: &apos;./src/index.html&apos; // 把这个文件的 html结构 放到 生成的html 文件中 }) ], mode: &apos;development&apos;, // 开发服务器 devServer ，用来自动化（自动编译，自动打开浏览器，自动刷新） // 启动 devServer 指令：npx webpack-dev-server(需要下载这个包) 注意：全局安装的包 可以作为指令使用，局部安装的要使用 npx devServer: { contentBase: resolve(__dirname, &apos;build&apos;), // 运行项目的目录 compress: true, // 启动gzip压缩 port: 8080, // 指定端口号 open: true } }`","categories":[],"tags":[]},{"title":"gulp学习","slug":"gulp学习","date":"2020-06-09T13:44:20.000Z","updated":"2020-06-13T07:59:28.190Z","comments":true,"path":"2020/06/09/gulp学习/","link":"","permalink":"http://yoursite.com/2020/06/09/gulp%E5%AD%A6%E4%B9%A0/","excerpt":"2020-06-09 gulp自动化构建工具学习gulp 是基于node的自动化构建工具（任务化和基于流，可同步或异步）","text":"2020-06-09 gulp自动化构建工具学习gulp 是基于node的自动化构建工具（任务化和基于流，可同步或异步） 一、安装 gulp1、安装 node2、全局安装 gulp // npm i -g gulp3、初始化 npm init 二、安装 gulp 常用插件三、新建 gulpfile.js 文件1、gulpfile.js 是 gulp 项目的配置文件。2、导入工具包 var gulp = require(‘gulp’) var less=require(‘gulp-less’);3、定义一个 less 任务， `gulp.task(‘testLess’,function(){ gulp.src(&apos;src/less/index.less&apos;) // 指明是哪个文件接受任务 .pipe(less()) //该任务调用的模块，这里的 less 就是引进来的工具 .pipe(gulp.dest(&apos;src/css&apos;)); //将会在src/css下生成index.css })` 四、gulp 常用的插件var gulp = require(&#39;gulp&#39;) // 网页自动刷新（服务器控制客户端同步刷新） var livereload = require(&#39;gulp-livereload&#39;) // 本地服务器 var webserver = require(&#39;gulp-webserver&#39;) // less文件编译成css var less = require(&#39;gulp-less&#39;) // 压缩css文件 var cssmin = require(&#39;gulp-clean-css&#39;) // 生成sourcemap文件 var sourcemaps = require(&#39;gulp-sourcemaps&#39;) // 当发生异常时提示错误 var notify = require(&#39;gulp-notify&#39;) var plumber = require(&#39;gulp-plumber&#39;) // 压缩html，可以压缩页面javascript、css，去除页面空格、注释，删除多余属性等操作 var htmlmin = require(&#39;gulp-htmlmin&#39;) // 只操作有过修改的文件 var changed = require(&#39;gulp-changed&#39;) // 压缩图片文件（包括PNG、JPEG、GIF和SVG图片） var imagemin = require(&#39;gulp-imagemin&#39;) // 深度压缩图片 var pngquant = require(&#39;imagemin-pngquant&#39;) // 只压缩修改的图片，没有修改的图片直接从缓存文件读取（C:\\Users\\Administrator\\AppData\\Local\\Temp\\gulp-cache）。 var cache = require(&#39;gulp-cache&#39;) // 给css文件里引用url加版本号 var cssver = require(&#39;gulp-make-css-url-version&#39;) // 压缩javascript文件，减小文件大小 var uglify = require(&#39;gulp-uglify&#39;) // 文件重命名 var rename = require(&#39;gulp-rename&#39;) // 合并javascript文件，减少网络请求 var concat = require(&#39;gulp-concat&#39;) // 文件清理 var clean = require(&#39;gulp-clean&#39;) 五、注意gulp是可同步或者异步的，当方法下有 return 的时候，是异步的，任务回同时进行；相反则是同步的，任务会按顺序执行，时间也较长。","categories":[],"tags":[{"name":"gulp","slug":"gulp","permalink":"http://yoursite.com/tags/gulp/"},{"name":"教程","slug":"教程","permalink":"http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"}]}],"categories":[],"tags":[{"name":"gulp","slug":"gulp","permalink":"http://yoursite.com/tags/gulp/"},{"name":"教程","slug":"教程","permalink":"http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"}]}